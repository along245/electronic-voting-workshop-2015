
/**
 * The main interface of the Android Verifier application
 * 
 * @author Android Verifier team
 *
 */
public interface Verifier {

	/**
	 * 
	 * @return an object representing the content of the scanned QR code.
	 */
	public QR getQR();

	/**
	 * 
	 * @param qr - an object representing the content of the scanned QR code
	 *           
	 * @return an object that represents the content of @param qr as a main QR ( QR of the
	 *         voting itself ), or null @param qr does not represent a main QR
	 */
	public MainQR getMainQR(QR qr);

	/**
	 * 
	 * @param qr - an object representing the content of the scanned QR code
	 *           
	 * @return an object that represents the content of @param qr as an audit QR
	 * 		   or null @param qr does not represent an audit QR
	 */
	public AuditQR getAuditQR(QR qr);

	/**
	 * 
	 * Encrypts the message and randomness that the AuditQR contains, and
	 * compares them to the encrypted message in the MainQR
	 * 
	 * @param auditQR - an object that represents the content of an audit QR
	 *         
	 * @param mainQR - an object that represents the content of a main QR ( QR of
	 *           	   the voting itself )
	 *            
	 * @return true iff the encrypted message generated by the parameters in the
	 *         AuditQR is equal to the encrypted message that appears in the MainQR
	 *     
	 */
	public boolean compareAuditQRAndMainQR(AuditQR auditQR, MainQR mainQR);

	/**
	 * Verify that the input vote appears in the BB.
	 * 
	 * @param mainQR
	 */
	public void verifyVoteInBB(MainQR mainQR);

	/**
	 * Send a complaint to the BB - will be used in case something goes wrong
	 * in one of the procedures.
	 *
	 * @param complaint
	 */
	public void issueBBComplaint(String complaint);

	/**
	 * Perform full verification of the mixnet algorithm
	 *
	 * @param mixnetFile - the file containing the layers and zero-knowledge proofs of the mixnet
	 *                      
	 */
	public void verifyMixnetFully(Mixnet mixnetFile);

	/**
	 * Perform a random verification of the mixnet algorithm on a given
	 * percentage of the algorithm levels (layers).
	 *
	 * @param mixnetFile - the file containing the layers and zero-knowledge proofs of the mixnet
	 *              
	 * @param verificationPercentage - the percentage of random layers to verify
	 *            
	 */
	public void verifyMixnetRandomlyByPercentage(Mixnet mixnetFile, int verificationPercentage);

}
